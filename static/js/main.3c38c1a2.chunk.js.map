{"version":3,"sources":["Buttons.js","App.js","reportWebVitals.js","index.js"],"names":["Buttons","props","state","count","input","handleChange","bind","handleAdd","handleSubstract","event","this","setState","Number","target","value","preventDefault","className","onClick","increment","decrement","type","step","onChange","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAmEeA,E,kDAhEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACTC,MAAO,EACPC,MAAO,GAET,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,gBAAkB,EAAKA,gBAAgBF,KAArB,gBARR,E,yDAWFG,GACXC,KAAKC,SAAS,CACZP,MAAOQ,OAAOH,EAAMI,OAAOC,W,gCAGrBL,GACRA,EAAMM,iBACNL,KAAKC,SAAS,CACZR,MAAOO,KAAKR,MAAME,MAAQM,KAAKR,MAAMC,U,sCAIzBM,GACdA,EAAMM,iBACNL,KAAKC,SAAS,CACZR,MAAOO,KAAKR,MAAMC,MAAQO,KAAKR,MAAME,U,kCAKvCM,KAAKC,SAAS,CACZR,MAAOO,KAAKR,MAAMC,MAAQ,M,kCAK5BO,KAAKC,SAAS,CACZR,MAAOO,KAAKR,MAAMC,MAAQ,M,+BAItB,IAAD,OACL,OACI,sBAAKa,UAAU,sBAAf,UACA,oBAAIA,UAAU,gCAAd,gDACI,oBAAIA,UAAU,uCAAd,SAAsDN,KAAKR,MAAMC,QACjE,sBAAKa,UAAU,SAAf,UACE,wBAAQA,UAAU,6DAA6DC,QAAS,kBAAM,EAAKC,aAAnG,eACA,wBAAQF,UAAU,6DAA6DC,QAAS,kBAAM,EAAKE,aAAnG,kBAEF,sBAAKH,UAAU,SAAf,UACE,+BACE,uBAAOI,KAAK,SAASC,KAAK,IAC1BC,SAAUZ,KAAKL,iBAEf,wBAAQW,UAAU,0CAA0CC,QAASP,KAAKH,UAAWa,KAAK,SAA1F,kBACA,wBAAQJ,UAAU,0CAA0CC,QAASP,KAAKF,gBAAiBY,KAAK,SAAhG,kC,GA1DEG,aCYPC,E,uKARb,OACE,qBAAKR,UAAU,MAAf,SACA,cAAC,EAAD,U,GALcO,aCSHE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3c38c1a2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Buttons extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        count: 0,\r\n        input: 0,\r\n      }\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleAdd = this.handleAdd.bind(this);\r\n      this.handleSubstract = this.handleSubstract.bind(this);\r\n    }\r\n    \r\n      handleChange(event) {\r\n        this.setState({\r\n          input: Number(event.target.value)\r\n        });\r\n      }\r\n      handleAdd(event) {\r\n        event.preventDefault()\r\n        this.setState({\r\n          count: this.state.input + this.state.count\r\n        });\r\n      }\r\n\r\n      handleSubstract(event) {\r\n        event.preventDefault()\r\n        this.setState({\r\n          count: this.state.count - this.state.input\r\n        });\r\n      }\r\n\r\n      increment(){\r\n        this.setState({\r\n          count: this.state.count + 1\r\n        });\r\n      }\r\n    \r\n      decrement(){\r\n        this.setState({\r\n          count: this.state.count - 1\r\n        });\r\n      }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container mainAlign\">\r\n            <h2 className=\"center red-text text-darken-4\">The current value of the state is:</h2>\r\n                <h1 className=\"center red-text text-darken-4 margin\">{this.state.count}</h1>\r\n                <div className=\"center\">\r\n                  <button className=\"btn-floating btn-large waves-effect waves-light red margin\" onClick={() => this.increment()}>+</button>\r\n                  <button className=\"btn-floating btn-large waves-effect waves-light red margin\" onClick={() => this.decrement()}>-</button>\r\n                </div>\r\n                <div className=\"center\">\r\n                  <form>\r\n                    <input type='number' step=\"1\"\r\n                    onChange={this.handleChange} />\r\n                    </form>\r\n                    <button className=\"waves-effect waves-light btn red margin\" onClick={this.handleAdd} type='submit'>Add!</button>\r\n                    <button className=\"waves-effect waves-light btn red margin\" onClick={this.handleSubstract} type='submit'>Substract!</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Buttons","import { Component } from \"react\";\nimport Buttons from './Buttons'\n\nclass App extends Component {\n\n  render(){\n  return (\n    <div className=\"App\">\n    <Buttons/>\n    </div>\n  );\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}